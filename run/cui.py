import os
import subprocess
import modal

DIR = "/root/comfy"

app = modal.App(
    "ComfyUI",
    image=modal.Image.debian_slim(python_version="3.11")
    .apt_install(
        "wget",
        "git",
        "libgl1",
        "libglib2.0-0",
    )
    .pip_install(
        "accelerate",
        "addict",
        "aiohttp",
        "aiosignal",
        "aiostream",
        "albucore",
        "albumentations",
        "annotated-types",
        "antlr4-python3-runtime",
        "anyio",
        "asgiref",
        "asttokens",
        "async-timeout",
        "attrs",
        "bitsandbytes",
        "certifi",
        "cffi",
        "charset-normalizer",
        "click",
        "cloudpickle",
        "cmake",
        "coloredlogs",
        "comfy-cli",
        "commonmark",
        "contourpy",
        "cryptography",
        "cycler",
        "Cython",
        "decorator",
        "deepdiff",
        "Deprecated",
        "diffusers",
        "distro",
        "easydict",
        "einops",
        "eval_type_backport",
        "executing",
        "fairscale",
        "fastapi",
        "fastprogress",
        "filelock",
        "flatbuffers",
        "fonttools",
        "frozenlist",
        "fsspec",
        "ftfy",
        "gitdb",
        "GitPython",
        "grpclib",
        "h11",
        "h2",
        "hpack",
        "httpcore",
        "httpx",
        "huggingface-hub",
        "humanfriendly",
        "hyperframe",
        "idna",
        "imageio",
        "importlib_metadata",
        "insightface",
        "ipython",
        "jedi",
        "Jinja2",
        "joblib",
        "jsonschema",
        "jsonschema-specifications",
        "kiwisolver",
        "kornia",
        "kornia_rs",
        "lazy_loader",
        "lightning-utilities",
        "llvmlite",
        "MarkupSafe",
        "matplotlib",
        "matplotlib-inline",
        "matrix-client",
        "mixpanel",
        "modal",
        "mpmath",
        "multidict",
        "networkx",
        "numba",
        "numpy",
        "nvidia-cublas-cu12",
        "nvidia-cuda-cupti-cu12",
        "nvidia-cuda-nvrtc-cu12",
        "nvidia-cuda-runtime-cu12",
        "nvidia-cudnn-cu12",
        "nvidia-cufft-cu12",
        "nvidia-curand-cu12",
        "nvidia-cusolver-cu12",
        "nvidia-cusparse-cu12",
        "nvidia-nccl-cu12",
        "nvidia-nvjitlink-cu12",
        "nvidia-nvtx-cu12",
        "omegaconf",
        "onnx",
        "onnxruntime",
        "onnxruntime-gpu",
        "open_clip_torch",
        "openai",
        "opencv-python",
        "opencv-python-headless",
        "ordered-set",
        "packaging",
        "pandas",
        "parso",
        "pathspec",
        "pexpect",
        "piexif",
        "pilgram",
        "Pillow",
        "platformdirs",
        "pooch",
        "prettytable",
        "prompt-toolkit",
        "protobuf",
        "psutil",
        "ptyprocess",
        "pure-eval",
        "py-cpuinfo",
        "pycparser",
        "pydantic",
        "pydantic_core",
        "PyGithub",
        "Pygments",
        "PyJWT",
        "PyMatting",
        "PyNaCl",
        "pynvml",
        "pyparsing",
        "python-dateutil",
        "python-multipart",
        "pytorch-lightning",
        "pytz",
        "PyYAML",
        "questionary",
        "referencing",
        "regex",
        "rembg",
        "requests",
        "requirements-parser",
        "rich",
        "rpds-py",
        "safetensors",
        "scikit-image",
        "scikit-learn",
        "scipy",
        "seaborn",
        "segment-anything",
        "sentencepiece",
        "shellingham",
        "simpleeval",
        "six",
        "smmap",
        "sniffio",
        "soundfile",
        "spandrel",
        "stack-data",
        "starlette",
        "sympy",
        "tblib",
        "threadpoolctl",
        "tifffile",
        "timm",
        "tokenizers",
        "toml",
        "tomli",
        "tomlkit",
        "torch",
        "torchaudio",
        "torchmetrics",
        "torchsde",
        "torchvision",
        "tqdm",
        "traitlets",
        "trampoline",
        "transformers",
        "triton",
        "typeguard",
        "typer",
        "types-certifi",
        "types-setuptools",
        "types-toml",
        "typing_extensions",
        "tzdata",
        "ultralytics",
        "ultralytics-thop",
        "urllib3",
        "wcwidth",
        "wrapt",
        "xformers",
        "yapf",
        "yarl",
        "zipp",
        "git+https://github.com/WASasquatch/cstr",
        "git+https://github.com/WASasquatch/ffmpy.git",
        "git+https://github.com/WASasquatch/img2texture.git",
    )
)

volume = modal.Volume.from_name(
    "CUI", create_if_missing=True
)

@app.function(
    # cpu=2,
    # memory=128,
    gpu="t4",
    concurrency_limit=1,
    allow_concurrent_inputs=100,
    container_idle_timeout=1200,
    timeout=10800,  # 3 hours
    # keep_warm=1,
    volumes={DIR: volume},
    _allow_background_volume_commits=True,
)

def run_comfy():
    comfy_port = 8188
    with modal.forward(comfy_port) as tunnel:
        cui_folder = os.path.join(DIR, "CUI")
        if os.path.exists(cui_folder):
            comfy_process_cmd = f"cd {cui_folder} && git pull && python main.py --listen 0.0.0.0"
        else:
            comfy_process_cmd = f"cd {DIR} && git clone https://github.com/comfyanonymous/ComfyUI.git CUI && cd CUI/custom_nodes && git clone https://github.com/ltdrdata/ComfyUI-Manager.git && cd ../.. && python main.py"
        quickfix = f"cd {cui_folder} && git remote -v && git remote set-url origin https://github.com/comfyanonymous/ComfyUI.git && git remote -v"
        comfy_process = subprocess.Popen(comfy_process_cmd, shell=True)
        print(f"ComfyUI available at => {tunnel.url}")
        comfy_process.wait()

@app.local_entrypoint()
def main():
    run_comfy.remote()
